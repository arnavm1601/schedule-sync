<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Timetable</title>
    <link rel="stylesheet" href="/css/time-table.css">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="main-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-sync-alt"></i> Schedule Sync
            </div>
            <ul class="sidebar-menu">
                <li><a href="/timetable"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                <li><a href="#timetable-section" class="scroll-link"><i class="fas fa-calendar-alt"></i> My Timetable</a></li>
                <li><a href="#leave-request-section" class="scroll-link"><i class="fas fa-user-check"></i> Request Leave</a></li>
                <li><a href="#inbox-section" class="scroll-link"><i class="fas fa-inbox"></i> Inbox <span id="unreadMessagesCount" class="unread-count"></span></a></li>
            </ul>
            <div class="sidebar-section-title">Current View</div>
            <ul class="sidebar-menu">
                <li><button class="sidebar-button"><i class="fas fa-users"></i> Meeting</button></li>
                <li><button class="sidebar-button"><i class="fas fa-cloud"></i> Scheduling</button></li>
            </ul>
            <button class="sidebar-button upcoming-event"><i class="fas fa-bell"></i> Upcoming Event</button>
        </div>

        <!-- Main content area -->
        <div class="content-area">
            <!-- Navbar -->
            <div class="navbar">
                <div class="navbar-left">
                    <span class="navbar-date" id="currentDate"></span>
                    <span class="navbar-time" id="currentTime"></span>
                </div>
                <div class="navbar-right">
                    <span class="user-name"><%= user.name %> (Teacher)</span>
                    <img src="/uploads/<%= user.profilePic %>" alt="Profile Pic" class="profile-pic" />
                    <a href="/logout" class="logout-button"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </div>
            </div>

            <!-- Timetable section -->
            <div class="timetable-section" id="timetable-section">
                <h3>My Timetable</h3>
                <table class="timetable-table">
                    <thead>
                        <tr>
                            <th>Days/Time</th>
                            <% for (let i = 1; i <= 8; i++) { %>
                                <th>Period <%= i %><br><span class="time-slot" id="period-<%= i %>-time"></span></th>
                            <% } %>
                        </tr>
                    </thead>
                    <tbody>
                        <% const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']; %>
                        <% days.forEach(day => { %>
                            <tr>
                                <td class="day-header"><%= day.charAt(0).toUpperCase() + day.slice(1) %></td>
                                <% for (let i = 0; i < 8; i++) { %>
                                    <td class="timetable-cell">
                                        <% if (timetable[day] && timetable[day][i]) { %>
                                            <strong><%= timetable[day][i].subject %></strong><br>
                                            <%= timetable[day][i].room %><br>
                                            <span class="lecture-time"><%= timetable[day][i].startTime %>-<%= timetable[day][i].endTime %></span>
                                        <% } else { %>
                                            <span class="empty-slot">Empty</span>
                                        <% } %>
                                    </td>
                                <% } %>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>

            <!-- Lecture Count Summary -->
            <div class="lecture-summary-section">
                <h3>Lecture Summary</h3>
                <p>Lectures Completed This Week: <span id="lecturesCompleted">0</span></p>
                <p>Lectures Remaining This Week: <span id="lecturesRemaining">0</span></p>
            </div>

            <!-- Leave Request Form -->
            <div class="leave-request-section" id="leave-request-section">
                <h3>Request Leave</h3>
                <form id="leaveRequestForm">
                    <label for="leaveDate">Leave Date:</label>
                    <input type="date" id="leaveDate" required />

                    <label for="reason">Reason for Leave:</label>
                    <textarea id="reason" rows="4" placeholder="e.g., Personal appointment, Sickness, etc." required></textarea>

                    <button type="submit" id="submitLeaveButton">Submit Leave Request</button>
                </form>
            </div>

            <!-- Custom Message Box -->
            <div id="customMessageBox" class="message-box-custom" style="display:none;">
                <p id="messageBoxText"></p>
                <div class="button-group" id="messageBoxButtons">
                    <button id="messageBoxConfirm" class="btn btn-primary">OK</button>
                    <button id="messageBoxCancel" class="btn btn-secondary" style="display:none;">Cancel</button>
                </div>
            </div>
            <!-- Loading Overlay -->
            <div id="loadingOverlay" class="loading-overlay" style="display:none;">
                <div class="spinner"></div>
                <p>Loading...</p>
            </div>

            <!-- Inbox Section -->
            <div class="inbox-section" id="inbox-section">
                <h3>Inbox</h3>
                <div class="message-list" id="messageList">
                    <!-- Messages will be loaded here -->
                    <p id="noMessagesMessage">No messages.</p>
                </div>
                <button class="compose-button" id="composeMessageButton">Compose Message to Admin</button>
            </div>

            <!-- Compose Message Modal -->
            <div id="composeModal" class="modal">
                <div class="modal-content">
                    <span class="close-button">&times;</span>
                    <h4>Compose Message to Admin</h4>
                    <form id="composeForm">
                        <input type="hidden" id="messageRecipient" value="admin" />
                        <label for="messageSubject">Subject:</label>
                        <input type="text" id="messageSubject" required />
                        <label for="messageBody">Message:</label>
                        <textarea id="messageBody" rows="6" required></textarea>
                        <button type="submit">Send Message</button>
                    </form>
                </div>
            </div>

            <!-- View Message Modal -->
            <div id="viewMessageModal" class="modal">
                <div class="modal-content">
                    <span class="close-button">&times;</span>
                    <h4>Message Details</h4>
                    <p><strong>From:</strong> <span id="viewMessageSender"></span> (<span id="viewMessageSenderRole"></span>)</p>
                    <p><strong>To:</strong> <span id="viewMessageRecipient"></span></p>
                    <p><strong>Subject:</strong> <span id="viewMessageSubject"></span></p>
                    <p><strong>Timestamp:</strong> <span id="viewMessageTimestamp"></span></p>
                    <p><strong>Message:</strong></p>
                    <div id="viewMessageBody" class="message-body-content"></div>
                </div>
            </div>

        </div>
    </div>

    <script>
        // EJS variables passed from the server
        const teacherTimetable = JSON.parse('<%- escapeJsString(JSON.stringify(timetable)) %>');
        const userEmail = '<%= user.email %>';
        const userRole = '<%= user.role %>';

        const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
        const periodTimes = [
            { start: '09:00', end: '10:00' },
            { start: '10:00', end: '11:00' },
            { start: '11:00', end: '12:00' },
            { start: '12:00', end: '1:00' },
            { start: '1:00', end: '2:00' },
            { start: '2:00', end: '3:00' },
            { start: '3:00', end: '4:00' }
        ];

        // --- Utility Functions for UX ---
        const customMessageBox = document.getElementById('customMessageBox');
        const messageBoxText = document.getElementById('messageBoxText');
        const messageBoxConfirm = document.getElementById('messageBoxConfirm');
        const messageBoxCancel = document.getElementById('messageBoxCancel');
        const loadingOverlay = document.getElementById('loadingOverlay');

        function showCustomMessage(message, type = 'info', onConfirm = null, onCancel = null) {
            messageBoxText.textContent = message;
            customMessageBox.className = `message-box-custom ${type}`;
            messageBoxConfirm.onclick = () => {
                customMessageBox.style.display = 'none';
                if (onConfirm) onConfirm();
            };

            if (onCancel) {
                messageBoxCancel.style.display = 'inline-block';
                messageBoxCancel.onclick = () => {
                    customMessageBox.style.display = 'none';
                    onCancel();
                };
            } else {
                messageBoxCancel.style.display = 'none';
            }
            customMessageBox.style.display = 'flex'; // Use flex for centering
        }

        function showLoading(show) {
            loadingOverlay.style.display = show ? 'flex' : 'none';
        }

        // --- Live Time Update ---
        function updateLiveTime() {
            const now = new Date();
            const dateOptions = { year: 'numeric', month: 'numeric', day: 'numeric' };
            const timeOptions = { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };

            document.getElementById('currentDate').textContent = `Today: ${now.toLocaleDateString('en-US', dateOptions)}`;
            document.getElementById('currentTime').textContent = now.toLocaleTimeString('en-US', timeOptions);
        }

        // --- Timetable Display ---
        function populatePeriodTimes() {
            periodTimes.forEach((time, index) => {
                const span = document.getElementById(`period-${index + 1}-time`);
                if (span) {
                    span.textContent = `(${time.start}-${time.end})`;
                }
            });
        }

        // --- Lecture Count Summary Logic ---
        function updateLectureSummary() {
            let completed = 0;
            let remaining = 0;
            const now = new Date();
            const currentDayIndex = now.getDay(); // 0 for Sunday, 1 for Monday, ..., 6 for Saturday
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();

            // Map JavaScript's getDay() to our 'days' array index (Monday=0, Saturday=5)
            let currentTimetableDayIndex = currentDayIndex - 1; // Adjust for 0-indexed days array (Mon=0, Tue=1...)

            if (currentDayIndex === 0) { // If it's Sunday, consider all previous days as completed for the week
                currentTimetableDayIndex = 6; // Effectively means all days up to Saturday are "past"
            }

            days.forEach((dayName, dayIdx) => {
                const dayLectures = teacherTimetable[dayName];
                if (dayLectures) {
                    dayLectures.forEach((lecture, periodIdx) => {
                        if (lecture && lecture.subject !== "Short Break" && lecture.subject !== "Lunch Break") {
                            const lectureStartHour = parseInt(lecture.startTime.split(':')[0]);
                            const lectureStartMinute = parseInt(lecture.startTime.split(':')[1]);
                            const lectureEndHour = parseInt(lecture.endTime.split(':')[0]);
                            const lectureEndMinute = parseInt(lecture.endTime.split(':')[1]);

                            if (dayIdx < currentTimetableDayIndex) {
                                completed++;
                            } else if (dayIdx === currentTimetableDayIndex) {
                                // Same day: compare times
                                const lectureStartTimeInMinutes = lectureStartHour * 60 + lectureStartMinute;
                                const lectureEndTimeInMinutes = lectureEndHour * 60 + lectureEndMinute;
                                const currentTimeInMinutes = currentHour * 60 + currentMinute;

                                if (currentTimeInMinutes >= lectureEndTimeInMinutes) {
                                    completed++;
                                } else if (currentTimeInMinutes < lectureStartTimeInMinutes) {
                                    remaining++;
                                } else {
                                    // Lecture is currently ongoing
                                    remaining++;
                                }
                            } else {
                                remaining++;
                            }
                        }
                    });
                }
            });
            document.getElementById('lecturesCompleted').textContent = completed;
            document.getElementById('lecturesRemaining').textContent = remaining;
        }


        // --- Leave Request Form Logic ---
        const leaveRequestForm = document.getElementById('leaveRequestForm');
        const submitLeaveButton = document.getElementById('submitLeaveButton');

        leaveRequestForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            submitLeaveButton.disabled = true;

            const leaveDate = document.getElementById('leaveDate').value;
            const reason = document.getElementById('reason').value;

            if (!leaveDate || !reason) {
                showCustomMessage('Please fill in all fields.', 'error');
                showLoading(false);
                submitLeaveButton.disabled = false;
                return;
            }

            const payload = {
                leaveDate,
                reason
            };

            try {
                const response = await fetch('/api/leave-request', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();

                if (response.ok) {
                    showCustomMessage('Leave request submitted successfully! Admin will review it.', 'success');
                    leaveRequestForm.reset();
                } else {
                    showCustomMessage('Error submitting leave request: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showCustomMessage('An error occurred while submitting the leave request.', 'error');
            } finally {
                showLoading(false);
                submitLeaveButton.disabled = false;
            }
        });


        // --- Inbox Logic ---
        const messageList = document.getElementById('messageList');
        const noMessagesMessage = document.getElementById('noMessagesMessage');
        const composeMessageButton = document.getElementById('composeMessageButton');
        const composeModal = document.getElementById('composeModal');
        const composeCloseButton = composeModal.querySelector('.close-button');
        const composeForm = document.getElementById('composeForm');
        const viewMessageModal = document.getElementById('viewMessageModal');
        const viewMessageCloseButton = viewMessageModal.querySelector('.close-button');
        const unreadMessagesCountSpan = document.getElementById('unreadMessagesCount');


        async function fetchAndRenderMessages() {
            showLoading(true);
            try {
                const response = await fetch('/api/messages');
                const messages = await response.json();

                messageList.innerHTML = '';
                if (messages.length === 0) {
                    noMessagesMessage.style.display = 'block';
                    unreadMessagesCountSpan.textContent = '';
                    unreadMessagesCountSpan.style.display = 'none';
                    return;
                }
                noMessagesMessage.style.display = 'none';

                let unreadCount = 0;
                messages.forEach(msg => {
                    const messageItem = document.createElement('div');
                    messageItem.classList.add('message-item');
                    // For teachers, only mark as unread if recipient is current teacher's email and it's not read
                    if (!msg.read && msg.recipient === userEmail) {
                        messageItem.classList.add('unread');
                        unreadCount++;
                    }
                    messageItem.innerHTML = `
                        <div class="message-header">
                            <span class="message-sender">From: ${msg.senderName} (${msg.senderRole})</span>
                            <span class="message-timestamp">${new Date(msg.timestamp).toLocaleString()}</span>
                        </div>
                        <div class="message-subject">Subject: ${msg.subject}</div>
                    `;
                    messageItem.addEventListener('click', () => showViewMessageModal(msg));
                    messageList.appendChild(messageItem);
                });

                if (unreadCount > 0) {
                    unreadMessagesCountSpan.textContent = unreadCount;
                    unreadMessagesCountSpan.style.display = 'inline-block';
                } else {
                    unreadMessagesCountSpan.textContent = '';
                    unreadMessagesCountSpan.style.display = 'none';
                }

            } catch (error) {
                console.error('Error fetching messages:', error);
                messageList.innerHTML = '<p class="error-message">Error loading messages.</p>';
                unreadMessagesCountSpan.textContent = '';
                unreadMessagesCountSpan.style.display = 'none';
            } finally {
                showLoading(false);
            }
        }

        async function markMessageAsRead(messageId) {
            try {
                const response = await fetch(`/api/messages/${messageId}/read`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' }
                });
                if (response.ok) {
                    // Message marked as read on backend, refresh UI
                    fetchAndRenderMessages();
                } else {
                    const result = await response.json();
                    console.error('Failed to mark message as read:', result.message);
                }
            } catch (error) {
                console.error('Error marking message as read:', error);
            }
        }

        function showViewMessageModal(message) {
            document.getElementById('viewMessageSender').textContent = message.senderName;
            document.getElementById('viewMessageSenderRole').textContent = message.senderRole;
            document.getElementById('viewMessageRecipient').textContent = message.recipient;
            document.getElementById('viewMessageSubject').textContent = message.subject;
            document.getElementById('viewMessageTimestamp').textContent = new Date(message.timestamp).toLocaleString();
            document.getElementById('viewMessageBody').textContent = message.body;

            viewMessageModal.style.display = 'flex'; // Use flex for centering

            // Mark message as read if it's unread and current user is the recipient
            if (!message.read && message.recipient === userEmail) {
                markMessageAsRead(message.id);
            }
        }

        viewMessageCloseButton.onclick = function() {
            viewMessageModal.style.display = 'none';
        }

        composeMessageButton.addEventListener('click', () => {
            composeForm.reset();
            composeModal.style.display = 'flex'; // Use flex for centering
        });

        composeCloseButton.onclick = function() {
            composeModal.style.display = 'none';
        }

        composeForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            composeForm.querySelector('button[type="submit"]').disabled = true;

            const recipient = document.getElementById('messageRecipient').value; // Should be 'admin'
            const subject = document.getElementById('messageSubject').value;
            const body = document.getElementById('messageBody').value;

            try {
                const response = await fetch('/api/messages', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ recipient, subject, body })
                });
                const result = await response.json();
                if (response.ok) {
                    showCustomMessage('Message sent successfully!', 'success');
                    composeModal.style.display = 'none';
                    fetchAndRenderMessages();
                } else {
                    showCustomMessage('Error sending message: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showCustomMessage('An error occurred while sending the message.', 'error');
            } finally {
                showLoading(false);
                composeForm.querySelector('button[type="submit"]').disabled = false;
            }
        });

        // Close modals when clicking outside
        window.onclick = function(event) {
            if (event.target == composeModal) {
                composeModal.style.display = 'none';
            }
            if (event.target == viewMessageModal) {
                viewMessageModal.style.display = 'none';
            }
            if (event.target == customMessageBox) { // Allow closing custom message box by clicking outside
                customMessageBox.style.display = 'none';
            }
        }


        // Initial calls
        updateLiveTime();
        populatePeriodTimes();
        setInterval(() => {
            updateLiveTime();
            updateLectureSummary();
        }, 1000);
        fetchAndRenderMessages();

        // Smooth scrolling for sidebar links
        document.querySelectorAll('.sidebar-menu .scroll-link').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });
    </script>
</body>
</html>
