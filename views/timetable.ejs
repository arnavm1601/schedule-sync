<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Timetable</title>
    <link rel="stylesheet" href="/css/time-table.css">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- FullCalendar CSS -->
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css' rel='stylesheet' />
</head>
<body>
    <div class="main-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-sync-alt"></i> Schedule Sync
            </div>
            <ul class="sidebar-menu">
                <li><a href="/timetable"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                <li><a href="#calendar-section" class="scroll-link"><i class="fas fa-calendar-alt"></i> Calendar</a></li>
                <li><a href="#leave-request-section" class="scroll-link"><i class="fas fa-user-check"></i> Request Leave</a></li>
                <li><a href="#"><i class="fas fa-inbox"></i> Inbox</a></li>
            </ul>
            <div class="sidebar-section-title">Current View</div>
            <ul class="sidebar-menu">
                <li><button class="sidebar-button"><i class="fas fa-users"></i> Meeting</button></li>
                <li><button class="sidebar-button"><i class="fas fa-cloud"></i> Scheduling</button></li>
            </ul>
            <button class="sidebar-button upcoming-event"><i class="fas fa-bell"></i> Upcoming Event</button>
        </div>

        <!-- Main content area -->
        <div class="content-area">
            <!-- Navbar -->
            <div class="navbar">
                <div class="navbar-left">
                    <span class="navbar-date" id="currentDate"></span>
                    <span class="navbar-time" id="currentTime"></span>
                </div>
                <div class="navbar-right">
                    <span class="user-name"><%= user.name %> (Teacher)</span>
                    <img src="/uploads/<%= user.profilePic %>" alt="Profile Pic" class="profile-pic" />
                    <a href="/logout" class="logout-button"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </div>
            </div>

            <!-- Timetable section -->
            <div class="timetable-section" id="calendar-section">
                <h3>My Timetable</h3>
                <div id='calendar'></div>
            </div>

            <!-- Lecture Count Summary -->
            <div class="lecture-summary-section">
                <h3>Lecture Summary</h3>
                <p>Lectures Completed This Week: <span id="lecturesCompleted">0</span></p>
                <p>Lectures Remaining This Week: <span id="lecturesRemaining">0</span></p>
            </div>

            <!-- Leave Request Form -->
            <div class="leave-request-section" id="leave-request-section">
                <h3>Request Leave</h3>
                <form id="leaveRequestForm">
                    <label for="leaveDate">Leave Date:</label>
                    <input type="date" id="leaveDate" required />

                    <label for="reason">Reason for Leave:</label>
                    <textarea id="reason" rows="4" placeholder="e.g., Personal appointment, Sickness, etc." required></textarea>

                    <button type="submit">Submit Leave Request</button>
                </form>
                <div id="leaveRequestMessage" class="message-box" style="display:none;"></div>
            </div>
        </div>
    </div>

    <!-- FullCalendar JS -->
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js'></script>
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales-all.min.js'></script>

    <script>
        // EJS variables passed from the server
        const teacherTimetable = JSON.parse('<%- escapeJsString(JSON.stringify(timetable)) %>');
        const userEmail = '<%= user.email %>';

        const daysMap = {
            'monday': 1, 'tuesday': 2, 'wednesday': 3, 'thursday': 4, 'friday': 5, 'saturday': 6, 'sunday': 0
        };

        let calendar; // FullCalendar instance

        // Function to update live time and date
        function updateLiveTime() {
            const now = new Date();
            const dateOptions = { year: 'numeric', month: 'numeric', day: 'numeric' };
            const timeOptions = { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };

            document.getElementById('currentDate').textContent = `Today: ${now.toLocaleDateString('en-US', dateOptions)}`;
            document.getElementById('currentTime').textContent = now.toLocaleTimeString('en-US', timeOptions);
        }

        // Helper to format lecture data for FullCalendar
        function formatLecturesForCalendar(timetable) {
            const events = [];
            const today = new Date();
            const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1))); // Monday of current week

            for (const day in timetable) {
                if (timetable.hasOwnProperty(day)) {
                    timetable[day].forEach((lecture, index) => {
                        if (lecture) {
                            const dayIndex = daysMap[day];
                            if (dayIndex === undefined) return; // Skip if day is not recognized

                            const eventDate = new Date(startOfWeek);
                            eventDate.setDate(startOfWeek.getDate() + (dayIndex - 1)); // Adjust for Monday as 1

                            const startDateTime = `${eventDate.toISOString().slice(0, 10)}T${lecture.startTime}`;
                            const endDateTime = `${eventDate.toISOString().slice(0, 10)}T${lecture.endTime}`;

                            events.push({
                                id: lecture.id,
                                title: `${lecture.subject} (${lecture.room})`,
                                start: startDateTime,
                                end: endDateTime,
                                extendedProps: {
                                    day: day,
                                    periodIndex: index,
                                    subject: lecture.subject,
                                    room: lecture.room
                                }
                            });
                        }
                    });
                }
            }
            return events;
        }

        // Initialize FullCalendar
        document.addEventListener('DOMContentLoaded', function() {
            const calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek', // Display a weekly view
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'timeGridWeek,timeGridDay'
                },
                slotMinTime: '08:00:00', // Start time for the calendar grid
                slotMaxTime: '18:00:00', // End time for the calendar grid
                allDaySlot: false, // Hide the all-day slot
                events: formatLecturesForCalendar(teacherTimetable) // Populate with initial data
            });
            calendar.render();
            updateLectureSummary(); 
        });
        function updateLectureSummary() {
            let completed = 0;
            let remaining = 0;
            const now = new Date();
            const currentDayIndex = now.getDay(); // 0 for Sunday, 1 for Monday, etc.
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();

            const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
            const currentDayName = days[currentDayIndex];

            for (const day in teacherTimetable) {
                if (teacherTimetable.hasOwnProperty(day)) {
                    teacherTimetable[day].forEach(lecture => {
                        if (lecture) {
                            const lectureDayIndex = daysMap[day];
                            const lectureStartHour = parseInt(lecture.startTime.split(':')[0]);
                            const lectureStartMinute = parseInt(lecture.startTime.split(':')[1]);
                            const lectureEndHour = parseInt(lecture.endTime.split(':')[0]);
                            const lectureEndMinute = parseInt(lecture.endTime.split(':')[1]);
                            if (lectureDayIndex < currentDayIndex) {
                                completed++;
                            } else if (lectureDayIndex === currentDayIndex) {
                                if (currentHour > lectureEndHour || (currentHour === lectureEndHour && currentMinute >= lectureEndMinute)) {
                                    completed++;
                                } else if (currentHour < lectureStartHour || (currentHour === lectureStartHour && currentMinute < lectureStartMinute)) {
                                    remaining++;
                                } else {
                                    remaining++;
                                }
                            } else {
                                remaining++;
                            }
                        }
                    });
                }
            }
            document.getElementById('lecturesCompleted').textContent = completed;
            document.getElementById('lecturesRemaining').textContent = remaining;
        }
        const leaveRequestForm = document.getElementById('leaveRequestForm');
        const leaveRequestMessage = document.getElementById('leaveRequestMessage');

        leaveRequestForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            const leaveDate = document.getElementById('leaveDate').value;
            const reason = document.getElementById('reason').value;

            if (!leaveDate || !reason) {
                showMessage('Please fill in all fields.', 'error');
                return;
            }

            const payload = {
                leaveDate,
                reason
            };

            try {
                const response = await fetch('/api/leave-request', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();

                if (response.ok) {
                    showMessage('Leave request submitted successfully! Admin will review it.', 'success');
                    leaveRequestForm.reset();
                } else {
                    showMessage('Error submitting leave request: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('An error occurred while submitting the leave request.', 'error');
            }
        });

        function showMessage(message, type) {
            leaveRequestMessage.textContent = message;
            leaveRequestMessage.className = `message-box ${type}`; // Add type class for styling
            leaveRequestMessage.style.display = 'block';
            setTimeout(() => {
                leaveRequestMessage.style.display = 'none';
            }, 5000); // Hide after 5 seconds
        }

        // Update time immediately and then every second
        updateLiveTime();
        setInterval(() => {
            updateLiveTime();
            updateLectureSummary(); // Update summary every second as well
        }, 1000);

        // Smooth scrolling for sidebar links
        document.querySelectorAll('.sidebar-menu .scroll-link').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });

        
    </script>
</body>
</html>
