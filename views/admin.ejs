<!DOCTYPE html>
<html>
<head>
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/css/admin.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="main-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
           Schedule Sync
            </div>
            <ul class="sidebar-menu">
                <li><a href="/admin"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                <li><a href="#timetable-section" class="scroll-link"><i class="fas fa-calendar-alt"></i> Timetable</a></li>
                <li><a href="#adjustments-section" class="scroll-link"><i class="fas fa-user-check"></i> Approve/Leave</a></li>
                <li><a href="#inbox-section" class="scroll-link"><i class="fas fa-inbox"></i> Inbox <span id="unreadMessagesCount" class="unread-count"></span></a></li>
            </ul>
            <div class="sidebar-section-title">Current View</div>
            <ul class="sidebar-menu">
                <li><button class="sidebar-button"><i class="fas fa-users"></i> Meeting</button></li>
                <li><button class="sidebar-button"><i class="fas fa-cloud"></i> Scheduling</button></li>
            </ul>
            <button class="sidebar-button upcoming-event"><i class="fas fa-bell"></i> Upcoming Event</button>
        </div>

        <div class="content-area">
            <div class="navbar">
                <div class="navbar-left">
                    <span class="navbar-date" id="currentDate"></span>
                    <span class="navbar-time" id="currentTime"></span>
                </div>
                <div class="navbar-right">
                    <span class="user-name"><%= user.name %> (Admin)</span>
                    <img src="/uploads/<%= user.profilePic %>" alt="Profile Pic" class="profile-pic" />
                    <a href="/logout" class="logout-button"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </div>
            </div>

            <div class="admin-content">
                <div class="teacher-dropdown-section">
                    <label for="teacherSelect">Teacher:</label>
                    <select id="teacherSelect">
                        <option value="">Select a Teacher</option>
                        <% teachers.forEach(teacher => { %>
                            <option value="<%= teacher.email %>"><%= teacher.name %> - <%= teacher.email %></option>
                        <% }) %>
                    </select>
                </div>

                <div id="teacherDetails" class="teacher-details-display" style="display: none;">
                    <h4>Selected Teacher Details:</h4>
                    <p><strong>Name:</strong> <span id="detailName"></span></p>
                    <p><strong>Email:</strong> <span id="detailEmail"></span></p>
                    <p><strong>Role:</strong> <span id="detailRole"></span></p>
                    <div style="text-align: center;">
                        <img id="detailProfilePic" src="" alt="Profile Pic" class="detail-profile-pic" />
                    </div>
                </div>

                <div class="timetable-section" id="timetable-section">
                    <h3>Teacher Timetable</h3>
                    <table class="timetable-table">
                        <thead>
                            <tr>
                                <th>Days/Time</th>
                                <% for (let i = 1; i <= 7; i++) { %>
                                    <th>Period <%= i %><br><span class="time-slot" id="period-<%= i %>-time"></span></th>
                                <% } %>
                            </tr>
                        </thead>
                        <tbody>
                            <% const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']; %>
                            <% days.forEach(day => { %>
                                <tr>
                                    <td class="day-header"><%= day.charAt(0).toUpperCase() + day.slice(1) %></td>
                                    <% for (let i = 0; i < 7; i++) { %>
                                        <td class="timetable-cell" data-day="<%= day %>" data-period-index="<%= i %>">
                                            <!-- Lecture details will be populated here by JS -->
                                        </td>
                                    <% } %>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>

                <!-- Custom Message Box -->
                <div id="customMessageBox" class="message-box-custom" style="display:none;">
                    <p id="messageBoxText"></p>
                    <div class="button-group" id="messageBoxButtons">
                        <button id="messageBoxConfirm" class="btn btn-primary">OK</button>
                        <button id="messageBoxCancel" class="btn btn-secondary" style="display:none;">Cancel</button>
                    </div>
                </div>
                <!-- Loading Overlay -->
                <div id="loadingOverlay" class="loading-overlay" style="display:none;">
                    <div class="spinner"></div>
                    <p>Loading...</p>
                </div>


                <!-- Lecture Input Modal -->
                <div id="lectureModal" class="modal">
                    <div class="modal-content">
                        <span class="close-button">&times;</span>
                        <h4>Add/Edit Lecture</h4>
                        <form id="lectureForm">
                            <input type="hidden" id="modalLectureId" />
                            <input type="hidden" id="modalTeacherEmail" />
                            <input type="hidden" id="modalDay" />
                            <input type="hidden" id="modalPeriodIndex" />

                            <label for="subject">Subject:</label>
                            <input type="text" id="subject" required />

                            <label for="room">Room No.:</label>
                            <input type="text" id="room" required />

                            <label for="startTime">Start Time:</label>
                            <input type="time" id="startTime" required />

                            <label for="endTime">End Time:</label>
                            <input type="time" id="endTime" required />

                            <button type="submit" id="saveLectureButton">Save Lecture</button>
                            <button type="button" id="deleteLectureButton" class="delete-button" style="display:none;">Delete Lecture</button>
                        </form>
                    </div>
                </div>

                <!-- Adjustment Requests Section -->
                <div class="adjustments-section" id="adjustments-section">
                    <h3>Pending Leave Adjustment Requests</h3>
                    <div id="adjustmentRequestsList">
                        <!-- Adjustment requests will be loaded here by JavaScript -->
                        <p id="noAdjustmentsMessage">No pending adjustment requests.</p>
                    </div>
                </div>

                 <!-- Adjustment Details Modal -->
                <div id="adjustmentModal" class="modal">
                    <div class="modal-content">
                        <span class="close-button">&times;</span>
                        <h4>Adjustment Request Details</h4>
                        <div id="adjustmentDetailsContent">
                            <p><strong>Teacher:</strong> <span id="adjTeacherName"></span> (<span id="adjTeacherEmail"></span>)</p>
                            <p><strong>Leave Date:</strong> <span id="adjLeaveDate"></span></p>
                            <p><strong>Reason:</strong> <span id="adjReason"></span></p>
                            <p><strong>Lectures Affected:</strong></p>
                            <ul id="adjLecturesAffected"></ul>
                            <p><strong>Current Status:</strong> <span id="adjStatus"></span></p>
                            <p><strong>Substitute Teacher:</strong> <span id="adjSubstitute"></span></p>
                        </div>
                        <form id="adjustmentActionForm">
                            <input type="hidden" id="adjRequestId" />
                            <label for="adjStatusSelect">Update Status:</label>
                            <select id="adjStatusSelect">
                                <option value="Pending Admin Action">Pending Admin Action</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                                <option value="Resolved">Resolved</option>
                            </select>
                            <label for="substituteTeacherSelect">Assign Substitute (Optional):</label>
                            <select id="substituteTeacherSelect">
                                <option value="">No Substitute</option>
                                <!-- Teachers will be dynamically loaded here -->
                            </select>
                            <button type="submit">Update Adjustment</button>
                        </form>
                    </div>
                </div>

                <!-- Inbox Section -->
                <div class="inbox-section" id="inbox-section">
                    <h3>Inbox</h3>
                    <div class="message-list" id="messageList">
                        <!-- Messages will be loaded here -->
                        <p id="noMessagesMessage">No messages.</p>
                    </div>
                    <button class="compose-button" id="composeMessageButton">Compose Message</button>
                </div>

                <!-- Compose Message Modal -->
                <div id="composeModal" class="modal">
                    <div class="modal-content">
                        <span class="close-button">&times;</span>
                        <h4>Compose New Message</h4>
                        <form id="composeForm">
                            <label for="messageRecipient">Recipient:</label>
                            <select id="messageRecipient" required>
                                <option value="">Select Recipient</option>
                                <% teachers.forEach(teacher => { %>
                                    <option value="<%= teacher.email %>"><%= teacher.name %> (Teacher)</option>
                                <% }) %>
                            </select>
                            <label for="messageSubject">Subject:</label>
                            <input type="text" id="messageSubject" required />
                            <label for="messageBody">Message:</label>
                            <textarea id="messageBody" rows="6" required></textarea>
                            <button type="submit">Send Message</button>
                        </form>
                    </div>
                </div>

                <!-- View Message Modal -->
                <div id="viewMessageModal" class="modal">
                    <div class="modal-content">
                        <span class="close-button">&times;</span>
                        <h4>Message Details</h4>
                        <p><strong>From:</strong> <span id="viewMessageSender"></span> (<span id="viewMessageSenderRole"></span>)</p>
                        <p><strong>To:</strong> <span id="viewMessageRecipient"></span></p>
                        <p><strong>Subject:</strong> <span id="viewMessageSubject"></span></p>
                        <p><strong>Timestamp:</strong> <span id="viewMessageTimestamp"></span></p>
                        <p><strong>Message:</strong></p>
                        <div id="viewMessageBody" class="message-body-content"></div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <script>
        // EJS variables passed from the server
        const allTimetables = JSON.parse('<%- escapeJsString(JSON.stringify(allTimetables)) %>');
        const teachersData = JSON.parse('<%- escapeJsString(JSON.stringify(teachers)) %>');
        const initialAdjustments = JSON.parse('<%- escapeJsString(JSON.stringify(adjustments)) %>');
        const currentUserEmail = '<%= user.email %>'; // Current logged-in admin's email

        const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
        const periodTimes = [
            { start: '09:00', end: '10:00' }, // Period 1
            { start: '10:00', end: '11:00' }, // Period 2
            { start: '11:00', end: '12:00' }, // Period 3
            { start: '12:00', end: '13:00' }, // Period 4
            { start: '13:00', end: '14:00' }, // Period 5
            { start: '14:00', end: '15:00' }, // Period 6
            { start: '15:00', end: '16:00' }  // Period 7 (ends at 4 PM)
        ];

        let currentSelectedTeacherEmail = '';

        // --- Utility Functions for UX ---
        const customMessageBox = document.getElementById('customMessageBox');
        const messageBoxText = document.getElementById('messageBoxText');
        const messageBoxConfirm = document.getElementById('messageBoxConfirm');
        const messageBoxCancel = document.getElementById('messageBoxCancel');
        const loadingOverlay = document.getElementById('loadingOverlay');

        function showCustomMessage(message, type = 'info', onConfirm = null, onCancel = null) {
            messageBoxText.textContent = message;
            customMessageBox.className = `message-box-custom ${type}`;
            messageBoxConfirm.onclick = () => {
                customMessageBox.style.display = 'none';
                if (onConfirm) onConfirm();
            };

            if (onCancel) {
                messageBoxCancel.style.display = 'inline-block';
                messageBoxCancel.onclick = () => {
                    customMessageBox.style.display = 'none';
                    onCancel();
                };
            } else {
                messageBoxCancel.style.display = 'none';
            }
            customMessageBox.style.display = 'flex'; // Use flex for centering
        }

        function showLoading(show) {
            loadingOverlay.style.display = show ? 'flex' : 'none';
        }

        // --- Live Time Update ---
        function updateLiveTime() {
            const now = new Date();
            const dateOptions = { year: 'numeric', month: 'numeric', day: 'numeric' };
            const timeOptions = { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };

            document.getElementById('currentDate').textContent = `Today: ${now.toLocaleDateString('en-US', dateOptions)}`;
            document.getElementById('currentTime').textContent = now.toLocaleTimeString('en-US', timeOptions);
        }

        // --- Timetable Display & Interaction ---
        function populatePeriodTimes() {
            periodTimes.forEach((time, index) => {
                const span = document.getElementById(`period-${index + 1}-time`);
                if (span) {
                    span.textContent = `(${time.start}-${time.end})`;
                }
            });
        }

        function populateTimetable(timetable) {
            days.forEach(day => {
                // Changed loop limit from 8 to 7
                for (let i = 0; i < 7; i++) {
                    const cell = document.querySelector(`.timetable-cell[data-day="${day}"][data-period-index="${i}"]`);
                    if (cell) {
                        const lecture = timetable && timetable[day] && timetable[day][i];
                        if (lecture) {
                            cell.innerHTML = `
                                <strong>${lecture.subject}</strong><br>
                                ${lecture.room}<br>
                                <span class="lecture-time">${lecture.startTime}-${lecture.endTime}</span>
                            `;
                            cell.classList.remove('empty-cell');
                            cell.dataset.lectureId = lecture.id; // Store lecture ID for editing
                        } else {
                            cell.innerHTML = '<span class="empty-slot">Empty</span>';
                            cell.classList.add('empty-cell');
                            cell.removeAttribute('data-lecture-id');
                        }
                    }
                }
            });
        }

        function clearTimetable() {
            days.forEach(day => {
                // Changed loop limit from 8 to 7
                for (let i = 0; i < 7; i++) {
                    const cell = document.querySelector(`.timetable-cell[data-day="${day}"][data-period-index="${i}"]`);
                    if (cell) {
                        cell.innerHTML = '<span class="empty-slot">Empty</span>';
                        cell.classList.add('empty-cell');
                        cell.removeAttribute('data-lecture-id');
                    }
                }
            });
        }

        // --- Teacher Selection Logic ---
        document.getElementById('teacherSelect').addEventListener('change', function() {
            currentSelectedTeacherEmail = this.value;
            const teacherDetailsDiv = document.getElementById('teacherDetails');

            if (currentSelectedTeacherEmail) {
                const selectedTeacher = teachersData.find(t => t.email === currentSelectedTeacherEmail);

                if (selectedTeacher) {
                    document.getElementById('detailName').textContent = selectedTeacher.name;
                    document.getElementById('detailEmail').textContent = selectedTeacher.email;
                    document.getElementById('detailRole').textContent = selectedTeacher.role;
                    document.getElementById('detailProfilePic').src = `/uploads/${selectedTeacher.profilePic}`;
                    teacherDetailsDiv.style.display = 'block';

                    const teacherTimetable = allTimetables[currentSelectedTeacherEmail] || getDefaultTimetable();
                    populateTimetable(teacherTimetable);
                } else {
                    teacherDetailsDiv.style.display = 'none';
                    clearTimetable();
                }
            } else {
                teacherDetailsDiv.style.display = 'none';
                clearTimetable();
            }
        });

        // --- Lecture Modal Logic ---
        const lectureModal = document.getElementById('lectureModal');
        const lectureCloseButton = lectureModal.querySelector('.close-button');
        const lectureForm = document.getElementById('lectureForm');
        const saveLectureButton = document.getElementById('saveLectureButton');
        const deleteLectureButton = document.getElementById('deleteLectureButton');

        function showLectureModal(day = null, periodIndex = null, lecture = null) {
            lectureForm.reset();
            document.getElementById('modalLectureId').value = '';
            deleteLectureButton.style.display = 'none';

            document.getElementById('modalTeacherEmail').value = currentSelectedTeacherEmail;
            document.getElementById('modalDay').value = day;
            document.getElementById('modalPeriodIndex').value = periodIndex;

            if (lecture) {
                document.getElementById('modalLectureId').value = lecture.id;
                document.getElementById('subject').value = lecture.subject;
                document.getElementById('room').value = lecture.room;
                document.getElementById('startTime').value = lecture.startTime;
                document.getElementById('endTime').value = lecture.endTime;
                deleteLectureButton.style.display = 'block';
            } else {
                if (periodIndex !== null && periodTimes[periodIndex]) {
                    document.getElementById('startTime').value = periodTimes[periodIndex].start;
                    document.getElementById('endTime').value = periodTimes[periodIndex].end;
                }
            }
            lectureModal.style.display = 'flex'; // Use flex for centering
        }

        lectureCloseButton.onclick = function() {
            lectureModal.style.display = 'none';
        }

        document.querySelector('.timetable-table tbody').addEventListener('click', function(e) {
            const cell = e.target.closest('.timetable-cell');
            if (cell && currentSelectedTeacherEmail) {
                const day = cell.dataset.day;
                const periodIndex = parseInt(cell.dataset.periodIndex);
                const lectureId = cell.dataset.lectureId;

                let lecture = null;
                if (lectureId) {
                    const teacherTimetable = allTimetables[currentSelectedTeacherEmail];
                    if (teacherTimetable && teacherTimetable[day]) {
                        lecture = teacherTimetable[day].find(lec => lec && lec.id === lectureId);
                    }
                }
                showLectureModal(day, periodIndex, lecture);
            } else if (!currentSelectedTeacherEmail) {
                showCustomMessage('Please select a teacher first to manage their timetable.', 'info');
            }
        });


        lectureForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            saveLectureButton.disabled = true;
            deleteLectureButton.disabled = true;

            const lectureId = document.getElementById('modalLectureId').value;
            const teacherEmail = document.getElementById('modalTeacherEmail').value;
            const subject = document.getElementById('subject').value;
            const room = document.getElementById('room').value;
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            const day = document.getElementById('modalDay').value;
            const periodIndex = parseInt(document.getElementById('modalPeriodIndex').value);

            const payload = {
                teacherEmail,
                day,
                periodIndex,
                subject,
                room,
                startTime,
                endTime,
                lectureId: lectureId || undefined
            };

            try {
                const response = await fetch('/api/lectures', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();

                if (response.ok) {
                    showCustomMessage(result.message, 'success');
                    lectureModal.style.display = 'none';
                    if (!allTimetables[teacherEmail]) {
                        allTimetables[teacherEmail] = getDefaultTimetable();
                    }
                    allTimetables[teacherEmail][day][periodIndex] = result.lecture;
                    populateTimetable(allTimetables[teacherEmail]);
                } else {
                    showCustomMessage('Error saving lecture: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showCustomMessage('An error occurred while saving the lecture.', 'error');
            } finally {
                showLoading(false);
                saveLectureButton.disabled = false;
                deleteLectureButton.disabled = false;
            }
        });

        deleteLectureButton.addEventListener('click', function() {
            showCustomMessage('Are you sure you want to delete this lecture?', 'confirm', async () => {
                showLoading(true);
                saveLectureButton.disabled = true;
                deleteLectureButton.disabled = true;

                const lectureId = document.getElementById('modalLectureId').value;
                const teacherEmail = document.getElementById('modalTeacherEmail').value;
                const day = document.getElementById('modalDay').value;
                const periodIndex = parseInt(document.getElementById('modalPeriodIndex').value);

                try {
                    const response = await fetch(`/api/lectures/${teacherEmail}/${day}/${lectureId}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();

                    if (response.ok) {
                        showCustomMessage(result.message, 'success');
                        lectureModal.style.display = 'none';
                        if (allTimetables[teacherEmail] && allTimetables[teacherEmail][day]) {
                            allTimetables[teacherEmail][day][periodIndex] = null;
                        }
                        populateTimetable(allTimetables[teacherEmail]);
                    } else {
                        showCustomMessage('Error deleting lecture: ' + result.message, 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showCustomMessage('An error occurred while deleting the lecture.', 'error');
                } finally {
                    showLoading(false);
                    saveLectureButton.disabled = false;
                    deleteLectureButton.disabled = false;
                }
            }, () => {
                // User cancelled, do nothing
            });
        });


        // --- Adjustment Requests Dashboard Logic ---
        const adjustmentRequestsList = document.getElementById('adjustmentRequestsList');
        const noAdjustmentsMessage = document.getElementById('noAdjustmentsMessage');
        const adjustmentModal = document.getElementById('adjustmentModal');
        const adjustmentCloseButton = adjustmentModal.querySelector('.close-button');
        const adjustmentActionForm = document.getElementById('adjustmentActionForm');
        const substituteTeacherSelect = document.getElementById('substituteTeacherSelect');

        function renderAdjustmentRequests(adjustments) {
            adjustmentRequestsList.innerHTML = '';
            if (adjustments.length === 0) {
                noAdjustmentsMessage.style.display = 'block';
                return;
            }
            noAdjustmentsMessage.style.display = 'none';

            adjustments.forEach(adj => {
                const adjDiv = document.createElement('div');
                adjDiv.classList.add('adjustment-request-item');
                adjDiv.innerHTML = `
                    <p><strong>Teacher:</strong> ${adj.teacherName} (${adj.teacherEmail})</p>
                    <p><strong>Leave Date:</strong> ${new Date(adj.leaveDate).toLocaleDateString()}</p>
                    <p><strong>Reason:</strong> ${adj.reason}</p>
                    <p><strong>Status:</strong> <span class="status-${adj.status.replace(/\s/g, '-').toLowerCase()}">${adj.status}</span></p>
                    <button class="view-details-button" data-id="${adj.id}">View Details</button>
                `;
                adjustmentRequestsList.appendChild(adjDiv);
            });

            document.querySelectorAll('.view-details-button').forEach(button => {
                button.addEventListener('click', function() {
                    const adjustmentId = this.dataset.id;
                    const selectedAdjustment = initialAdjustments.find(adj => adj.id === adjustmentId);
                    if (selectedAdjustment) {
                        showAdjustmentModal(selectedAdjustment);
                    }
                });
            });
        }

        function populateSubstituteTeachers(leavingTeacherEmail) {
            substituteTeacherSelect.innerHTML = '<option value="">No Substitute</option>';
            teachersData.forEach(teacher => {
                if (teacher.email !== leavingTeacherEmail) {
                    const option = document.createElement('option');
                    option.value = teacher.email;
                    option.textContent = `${teacher.name} (${teacher.email})`;
                    substituteTeacherSelect.appendChild(option);
                }
            });
        }

        function showAdjustmentModal(adjustment) {
            document.getElementById('adjRequestId').value = adjustment.id;
            document.getElementById('adjTeacherName').textContent = adjustment.teacherName;
            document.getElementById('adjTeacherEmail').textContent = adjustment.teacherEmail;
            document.getElementById('adjLeaveDate').textContent = new Date(adjustment.leaveDate).toLocaleDateString();
            document.getElementById('adjReason').textContent = adjustment.reason;

            const lecturesAffectedList = document.getElementById('adjLecturesAffected');
            lecturesAffectedList.innerHTML = '';
            if (adjustment.lectures && adjustment.lectures.length > 0) {
                adjustment.lectures.forEach(lec => {
                    const li = document.createElement('li');
                    li.textContent = `Period ${lec.periodIndex + 1}: ${lec.subject} in ${lec.room} (${lec.startTime} - ${lec.endTime})`;
                    lecturesAffectedList.appendChild(li);
                });
            } else {
                lecturesAffectedList.innerHTML = '<li>No lectures affected or details not provided.</li>';
            }

            document.getElementById('adjStatus').textContent = adjustment.status;
            document.getElementById('adjStatusSelect').value = adjustment.status;
            document.getElementById('adjSubstitute').textContent = adjustment.substituteTeacher || 'N/A';

            populateSubstituteTeachers(adjustment.teacherEmail);
            if (adjustment.substituteTeacher) {
                substituteTeacherSelect.value = adjustment.substituteTeacher;
            } else {
                substituteTeacherSelect.value = '';
            }

            adjustmentModal.style.display = 'flex'; // Use flex for centering
        }

        adjustmentCloseButton.onclick = function() {
            adjustmentModal.style.display = 'none';
        }

        adjustmentActionForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            adjustmentActionForm.querySelector('button[type="submit"]').disabled = true;

            const adjustmentId = document.getElementById('adjRequestId').value;
            const status = document.getElementById('adjStatusSelect').value;
            const substituteTeacher = document.getElementById('substituteTeacherSelect').value;

            const payload = {
                adjustmentId,
                status,
                substituteTeacher: substituteTeacher || null
            };

            try {
                const response = await fetch('/api/adjustments/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();

                if (response.ok) {
                    showCustomMessage(result.message, 'success');
                    adjustmentModal.style.display = 'none';
                    const updatedAdjIndex = initialAdjustments.findIndex(adj => adj.id === adjustmentId);
                    if (updatedAdjIndex !== -1) {
                        initialAdjustments[updatedAdjIndex] = result.adjustment;
                    }
                    renderAdjustmentRequests(initialAdjustments.filter(adj => adj.status === 'Pending Admin Action'));
                } else {
                    showCustomMessage('Error updating adjustment: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showCustomMessage('An error occurred while updating the adjustment.', 'error');
            } finally {
                showLoading(false);
                adjustmentActionForm.querySelector('button[type="submit"]').disabled = false;
            }
        });

        // --- Inbox Logic ---
        const messageList = document.getElementById('messageList');
        const noMessagesMessage = document.getElementById('noMessagesMessage');
        const composeMessageButton = document.getElementById('composeMessageButton');
        const composeModal = document.getElementById('composeModal');
        const composeCloseButton = composeModal.querySelector('.close-button');
        const composeForm = document.getElementById('composeForm');
        const viewMessageModal = document.getElementById('viewMessageModal');
        const viewMessageCloseButton = viewMessageModal.querySelector('.close-button');
        const unreadMessagesCountSpan = document.getElementById('unreadMessagesCount');

        async function fetchAndRenderMessages() {
            showLoading(true);
            try {
                const response = await fetch('/api/messages');
                const messages = await response.json();

                messageList.innerHTML = '';
                if (messages.length === 0) {
                    noMessagesMessage.style.display = 'block';
                    unreadMessagesCountSpan.textContent = '';
                    unreadMessagesCountSpan.style.display = 'none';
                    return;
                }
                noMessagesMessage.style.display = 'none';

                let unreadCount = 0;
                messages.forEach(msg => {
                    const messageItem = document.createElement('div');
                    messageItem.classList.add('message-item');
                    if (!msg.read && (msg.recipient === currentUserEmail || (currentUserEmail === 'admin' && msg.recipient === 'admin'))) {
                        messageItem.classList.add('unread');
                        unreadCount++;
                    }
                    messageItem.innerHTML = `
                        <div class="message-header">
                            <span class="message-sender">From: ${msg.senderName} (${msg.senderRole})</span>
                            <span class="message-timestamp">${new Date(msg.timestamp).toLocaleString()}</span>
                        </div>
                        <div class="message-subject">Subject: ${msg.subject}</div>
                    `;
                    messageItem.addEventListener('click', () => showViewMessageModal(msg));
                    messageList.appendChild(messageItem);
                });

                if (unreadCount > 0) {
                    unreadMessagesCountSpan.textContent = unreadCount;
                    unreadMessagesCountSpan.style.display = 'inline-block';
                } else {
                    unreadMessagesCountSpan.textContent = '';
                    unreadMessagesCountSpan.style.display = 'none';
                }

            } catch (error) {
                console.error('Error fetching messages:', error);
                messageList.innerHTML = '<p class="error-message">Error loading messages.</p>';
                unreadMessagesCountSpan.textContent = '';
                unreadMessagesCountSpan.style.display = 'none';
            } finally {
                showLoading(false);
            }
        }

        async function markMessageAsRead(messageId) {
            try {
                const response = await fetch(`/api/messages/${messageId}/read`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' }
                });
                if (response.ok) {
                    // Message marked as read on backend, refresh UI
                    fetchAndRenderMessages();
                } else {
                    const result = await response.json();
                    console.error('Failed to mark message as read:', result.message);
                }
            } catch (error) {
                console.error('Error marking message as read:', error);
            }
        }

        function showViewMessageModal(message) {
            document.getElementById('viewMessageSender').textContent = message.senderName;
            document.getElementById('viewMessageSenderRole').textContent = message.senderRole;
            document.getElementById('viewMessageRecipient').textContent = message.recipient;
            document.getElementById('viewMessageSubject').textContent = message.subject;
            document.getElementById('viewMessageTimestamp').textContent = new Date(message.timestamp).toLocaleString();
            document.getElementById('viewMessageBody').textContent = message.body;

            viewMessageModal.style.display = 'flex'; // Use flex for centering

            // Mark message as read if it's unread and current user is the recipient
            if (!message.read && (message.recipient === currentUserEmail || (currentUserEmail === 'admin' && message.recipient === 'admin'))) {
                markMessageAsRead(message.id);
            }
        }

        viewMessageCloseButton.onclick = function() {
            viewMessageModal.style.display = 'none';
        }

        composeMessageButton.addEventListener('click', () => {
            composeForm.reset();
            composeModal.style.display = 'flex'; // Use flex for centering
        });

        composeCloseButton.onclick = function() {
            composeModal.style.display = 'none';
        }

        composeForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            composeForm.querySelector('button[type="submit"]').disabled = true;

            const recipient = document.getElementById('messageRecipient').value;
            const subject = document.getElementById('messageSubject').value;
            const body = document.getElementById('messageBody').value;

            try {
                const response = await fetch('/api/messages', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ recipient, subject, body })
                });
                const result = await response.json();
                if (response.ok) {
                    showCustomMessage('Message sent successfully!', 'success');
                    composeModal.style.display = 'none';
                    fetchAndRenderMessages();
                } else {
                    showCustomMessage('Error sending message: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showCustomMessage('An error occurred while sending the message.', 'error');
            } finally {
                showLoading(false);
                composeForm.querySelector('button[type="submit"]').disabled = false;
            }
        });

        // Close modals when clicking outside
        window.onclick = function(event) {
            if (event.target == lectureModal) {
                lectureModal.style.display = 'none';
            }
            if (event.target == adjustmentModal) {
                adjustmentModal.style.display = 'none';
            }
            if (event.target == composeModal) {
                composeModal.style.display = 'none';
            }
            if (event.target == viewMessageModal) {
                viewMessageModal.style.display = 'none';
            }
            if (event.target == customMessageBox) { // Allow closing custom message box by clicking outside
                customMessageBox.style.display = 'none';
            }
        }


        // Initial calls
        updateLiveTime();
        setInterval(updateLiveTime, 1000);
        populatePeriodTimes(); // Populate time slots in header
        renderAdjustmentRequests(initialAdjustments.filter(adj => adj.status === 'Pending Admin Action'));
        fetchAndRenderMessages(); // Load initial messages

        // Helper to get a default empty timetable for a new teacher (client-side)
        function getDefaultTimetable() {
            const defaultTimetable = {};
            days.forEach(day => {
                // Changed to 7 periods
                defaultTimetable[day] = Array(7).fill(null);
            });
            return defaultTimetable;
        }

        // Smooth scrolling for sidebar links
        document.querySelectorAll('.sidebar-menu .scroll-link').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });
    </script>
</body>
</html>
